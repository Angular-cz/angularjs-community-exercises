p V tomto příkladu si vyzkoušíte základní vlastnosti formulářů a také možnosti jejich zanoření. Budeme vytvářet pojmenovaný seznam kontaktů

h3 1. vyzkoušejte že formulář funguje
ul
  li podívejte se v #[em index.html]
  li jak je navázaný na vlastnost #[strong contactlist] controlleru #[strong ContactlistController]
  li jak se mění třídy formuláře a prvků
  li jak se do modelu propagují validní/nevalidní hodnoty

h3 2. validace
p.
  V tomto kroku oživíme validaci políčka List name.

h4 2.1 přiřaďte formulář do scope
p.
  Stavové informace o formuláři bude angular ukládat do objektu pojmenovaném podle názvu formuláře.
  Formulář tedy nejprve pojmenujeme, abychom měli přístup ke stavovým informacím.
ul
  li.task pojmenujte formulář #[strong contactlistForm]

hint Využijte vlastnost formuláře #[strong name]
solution
  :highlight-html
    <form novalidate name="contactlistForm">

h4 2.2 zobrazení validačních textů
p.
  Všimněte si, že chybové zprávy pole pro název seznamu kontaktů jsou zobrazeny vždy.
  Zajistíme teď jejich zobrazení jen když je konkrétní validační pravidlo porušeno.

ul
  li Položka je povinná a má minimální povolenou délku 5 znaků.
  li Ve formuláři bude položka dostupná pod názvem #[strong listName]
  li.task použijte #[strong ng-messages] / #[strong ng-message] pro správní zobrazení textů


hint Direktivě #[strong ng-messages] předejte vlastnost #[strong $error] validovaného pole

solution
  :highlight-html
    <div ng-messages="contactlistForm.listName.$error">
      <div class="text-danger" ng-message="required">
        You did not enter contactlist name
      </div>
      <div class="text-danger" ng-message="minlength">
        Name must have at least 5 characters
      </div>
    </div>

h4 2.3 user-friendly chování
p.
  Validační texty se nyní zobrazují správně, ale jsou vidět okamžite po obnovení stránky.
  Lepší by bylo zobrazit je až při odeslání formuláře, nebo ve chvíli kdy uživatel s políčkem pracoval.

ul
  li.task zobrazujte validační texty až když je to relevantní

hint.
  Využijte vlastnost #[strong $submitted] na formuláři a #[strong $touched] na prvku.

solution
  :highlight-html
    <div ng-messages="contactlistForm.listName.$error"
         ng-if="(contactlistForm.listName.$touched || contactlistForm.$submitted)">

      <div class="text-danger" ng-message="required">
        You did not enter contactlist name
      </div>
      <div class="text-danger" ng-message="minlength">
        Name must have at least 5 characters
      </div>
    </div>

h3 3 Zanořený formulář

p.
  Část formuláře se jmény a čísly se opakuje pro každý kontakt.
  V názvech a cestách pro validaci bychom tedy museli používat dynamicky sestavenou cestu od formuláře #[strong contactlistForm], což by bylo komplikované.
  Namísto toho využujeme možnost zanořovat formuláře.

h4 3.1 vytvořte zanořený formulář

ul.task
  li Na elementu #[strong fieldset] definujte zanořený formulář pojmenovaný #[strong contactForm]

hint K vytvoření zanořeného formuláře využijte direktivu #[strong ng-form].

solution
  :highlight-html
    <fieldset class="well form-inline"
              ng-repeat="(index, contact) in vm.contactlist.contacts"
              ng-form="contactForm">

h4 3.2 validace jména kontaktu
p.
  Nyní můžeme definovat validace pro jméno kontaktu. Využijeme připravenou komponentu #[strong validation-messages],
  která validaci zapouzdřuje.

ul
  li.task prohlédněte si definici validační komponenty
  li.task použijte ji pro jméno kontaktu

hint.
  #[strong validation-messages] je komponenta - použijeme ji tedy jako element.
  Jako hodnotu atributu #[strong input-field] očekává komponenta stavový objekt prvku.

solution
  :highlight-html
    <validation-messages input-field="contactForm.name"></validation-messages>

h3 4 vlastní validátor

h4 4.1 definujte validátor českého čísla

ul.task
  li nastavte definiční objekt directivy validátoru, tak aby:
ul
  li byla omezená jako atribut,
  li měla závislost na #[strong ngModel]
  li funkce link přijímala #[strong ngModelController] jako čtvrtý parametr
  li v této funkci přidejte do objektu #[strong ngModelController.$validators] validátor #[strong czechPhoneNumber]
  li pozor na to, že validátor musí projít, pokud je hodnota undefined, nebo prázdný string, na tyto hodnoty reaguje pouze validátor require
  li regulární výraz #[strong pattern] je již připraven, stačí zavolat metodu #[strong .test]

hint Závislost vyjádříte pomocí attributu #[strong require].
  br
  | Validátor je funkce která přijímá hodnotu k validaci
  br
  | Kontrolu prázdnosti proveďte pomocí metody #[strong ngModelController.$isEmpty]


solution
  :highlight-js
    function validateCzechPhoneNumberDirective() {
      var pattern = /^(\+420)?( ?\d{3}){3}$/;

      return {
        restrict: 'A',
        require: 'ngModel',
        link: function(scope, element, attrs, ngModelController) {
          ngModelController.$validators.czechPhoneNumber = function(value) {
            if (ngModelController.$isEmpty(value)) {
              return true;
            }

            return pattern.test(value);
          };
        }
      };
    }

h4 4.2 použijte validátor českého čísla
p.
  Použijte validátor #[strong validateCzechPhoneNumber] na inputu pro zadání telefonního čísla.

ul.task
  li použijte validátor v inputu (pozor na správné uvedení názvu)

hint.
  Direktivy a komponenty mají v javascriptu název s #[strong cammelCase], ale v html je používáme jako #[strong dash-case]

solution
  :highlight-html
    <input class="form-control" type="text" id="phone-{{$index}}"
           name="phone"
           ng-model="contact.phone"
           validate-czech-phone-number
           required/>

h4 4.3 definujte chybovou zprávu pro czechPhoneNumber
p.
  Definujte chybovou zprávu dle výsledku validace.

ul
  li.
    validační zpráva pro #[strong czechPhoneNumber] není ve standardních zprávách komponenty #[strong validation-messages] definovaná
  li.task dodefinujte ji tedy pro toto použití pomocí #[strong ng-message] uvnitř tagů komponenty (využije se transkluze, kterou komponenta podporuje).

solution
  :highlight-html
    <validation-messages input-field="contactForm.phone">
      <div ng-message="czechPhoneNumber"> must be czech phone number.</div>
    </validation-messages>

h3 5 oživte přidávání kontaktů
p.
  Tlačítko #[strong +] pro přidávání kontaktů nefunguje. V tomto kroku ho oživíme a ověříme, že validace fungují také pro nově přidané kontakty.

ul
  li tlačítko volá metodu kontrolleru #[strong vm.addContact]
  li.task v jejím těle přidejte do pole kontatků #[strong this.contactlist.contacts] novou prázdnou položku
  li.task ověřte, že přidávání funguje a validace se chovají spráívně

hint Použijte metodu #[strong push] a přidejte do ní prázdný objekt #[strong {}].

solution
  :highlight-js
    this.addContact = function() {
      this.contactlist.contacts.push({});
    };

h3 6 reagujte na odeslání formuláře
ul.task
  li obslužte odeslání formuláře
  li při odeslání formuláře zavolejte metodu kontroleru #[strong vm.save], jako parametr jí předejte objekt formuláře

hint.
  Událost odeslání formuláře obloužíte direktivou #[strong ng-submit].

solution
  :highlight-html
    <form novalidate name="contactlistForm"
                      ng-submit="vm.save(contactlistForm)">
